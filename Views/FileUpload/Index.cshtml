@model List<App.Models.FieldModel>
<!--
ER Diagramming Editor.
Created by Matthew Walton.
This page is the front end logic for the ER Diagramming Editor
After uploading a CSV to the system, it allows users to click attributes and append them to tables
the tables then become distiguishable to the lines that are drawn to form relationships
in the end the user can capture the image which momentarily hides useless information to the ER diagram context
-->

<div class="attribute-selection">
    <h7 class="DiagrammingHeaders">Fields and Datatypes</h7>
    @foreach (var fieldModel in Model)
    {
        <div class="field">
            <label>
                <input type="checkbox" name="selectedFields" value="@fieldModel.FieldName" /> @fieldModel.FieldName - @fieldModel.DataType
            </label>
        </div>
    }

    <button onclick="addTable()" class="func-button">Add Table</button>

    <hr>
    <h7 class="DiagrammingHeaders">Add Fields and Datatypes</h7>
    <div class="custom-attribute-input">
        <input type="text" id="customAttributeName" placeholder="Attribute Name" style="width: 10rem;">
        <select id="customAttributeType">
            <option value="string">String</option>
            <option value="int">Integer</option>
            <option value="varchar">Varchar</option>
            <option value="date">Date</option>
            <option value="float">Float</option>
            <option value="bool">Boolean</option>
        </select><br><br />
        <button type="button" onclick="addCustomField()" class="func-button">Add Attribute</button>
    </div>
</div>


<div class="relationship-selection">
    <h7 class="DiagrammingHeaders">Relationships<br /></h7>
    <label for="startTable">Start Table: </label>
    <select id="startTable"></select>
    <br />
    <label for="endTable">End Table:</label>
    <select id="endTable"></select>
    <br />
    <label for="relationshipType"><br />Relationship Type:</label>
    <select id="relationshipType">
        <br />
        <option value="one-to-one">One-to-One</option>
        <option value="one-to-many">One-to-Many</option>
        <option value="many-to-one">Many-to-One</option>
        <option value="many-to-many">Many-to-Many</option>
    </select>
    <br><br />
    <button onclick="addRelationship()" class="func-button">Add Relationship</button>
    <hr>

    <div class="relationship-log-container">
        <h7>Relationship Log:</h7>
        <button onclick="clearRelationshipLog()" class="func-button">Clear Log</button>
        <div class="relationship-log"></div>
    </div>
</div>


<div class="diagramAndbuttons">
    <div class="diagramming-environment">
        <div id="tables-container"></div>
        <g id="tablesLayer" style="pointer-events: all;"></g> <!-- This is where the tables will be appended -->

        <svg id="relationships" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none;">
            <defs>
                <!-- Marker for One-to-One relationships (Cross) -->
                <marker id="cross" markerWidth="20" markerHeight="20" refX="10" refY="10" orient="auto" markerUnits="userSpaceOnUse">
                    <line x1="0" y1="10" x2="20" y2="10" stroke="white" stroke-width="6" /> <!-- Thicker white outline -->
                    <line x1="10" y1="0" x2="10" y2="20" stroke="white" stroke-width="6" />
                    <line x1="0" y1="10" x2="20" y2="10" stroke="black" stroke-width="3" /> <!-- Thicker black line -->
                    <line x1="10" y1="0" x2="10" y2="20" stroke="black" stroke-width="3" />
                </marker>

                <!-- Marker for One-to-Many and Many-to-Many relationships (Crow's Feet facing away, bigger) -->
                <marker id="crowfeet" markerWidth="60" markerHeight="60" refX="56" refY="30" orient="auto" markerUnits="userSpaceOnUse">
                    <path d="M0,30 L60,30 M60,20 L30,30 L60,40" fill="none" stroke="white" stroke-width="6" />
                    <path d="M0,30 L60,30 M60,20 L30,30 L60,40" fill="none" stroke="black" stroke-width="3" />
                </marker>

                <!-- Marker for reverse Many-to-One (i.e., crow's feet facing line, bigger) -->
                <marker id="crowfeet-reverse" markerWidth="60" markerHeight="60" refX="4" refY="30" orient="auto" markerUnits="userSpaceOnUse">
                    <path d="M60,30 L0,30 M0,20 L30,30 L0,40" fill="none" stroke="white" stroke-width="6" />
                    <path d="M60,30 L0,30 M0,20 L30,30 L0,40" fill="none" stroke="black" stroke-width="3" />
                </marker>
            </defs>

            <g id="linesLayer"></g> <!-- This is where the lines will be appended -->

        </svg>
    </div>




    <div class="button-options">
        <button onclick="clearDiagram()" class="float-end clear-button">Clear Diagram</button>
        <button onclick="captureDiagramDownload()" class="float-end capture-button-download">Capture and Download</button>
        <button onclick="captureDiagramSave()" class="float-end capture-button-save">Capture and Save</button>
        <button onclick="clearLines()" class="float-end deleteLineButton">Delete Line</button>
    </div>
</div>









<style>


    html, body {
        margin: 0;
        padding: 0;
        height: 100%;
        overflow: hidden;
        background: #E8EDEB;
        font-family: Arial, Helvetica, sans-serif;
        position: relative;
        width: 100% !important;
        max-width: 100% !important;
        padding-left: 20px;
    }




    .DiagrammingHeaders {
        font-weight: bold;
    }

    .attribute-selection, .diagramming-environment .relationship-selection {
        margin: 0rem;
        box-sizing: border-box;
        background: #9fccfa;
        position: relative;
        height: 80vh;
    }

    .attribute-selection {
        float: left;
        width: calc(15% - 2*0.625rem); /* 10px = 0.625rem (assuming default font-size of 16px) */
        padding: .5rem;
        border: 0.125rem solid #000; /* 1px = 0.0625rem */
        border-right: 0;
        font-size: 0.90em;
        overflow-y: auto;
    }


    .relationship-selection {
        float: left;
        width: calc(15% - 2*0.625rem);
        padding: 0.5rem;
        border: 0.125rem solid #000;
        border-top-width: 0.125rem;
        border-right: 0;
        height: 80vh;
        font-size: 0.90em;
        overflow-y: auto;
        background: #9fccfa;
    }

    .diagramming-environment {
        float: left;
        width: calc(70% - 2*0.625rem);
        padding: 0.625rem;
        border: 0.125rem solid #000;
        box-sizing: border-box;
        position: relative;
        height: 80vh;
        background-color: #f0f0f0;
        background-image: linear-gradient(0deg, #9498b2 0.0625rem, transparent 0.0625rem), linear-gradient(90deg, #9498b2 0.0625rem, transparent 0.0625rem);
        background-size: 1.25rem 1.25rem;
        transform-origin: 0 0;
        overflow: hidden;
    }

    .diagram&buttons {
        display: flex;
        flex-direction: column;
        float: left;
        width: calc(60% - 2*0.625rem);
        padding: 0.625rem;
        box-sizing: border-box;
    }

    .custom-attribute-input {
        padding: 0.3125rem;
        gap: 0.625rem;
    }

    #customAttributeName {
        margin-bottom: 1rem;
    }

    .table-container {
        position: absolute;
        cursor: grab;
        background-color: white;
        width: fit-content;
        border: 0.25rem solid black;
        border-radius: 0.5rem;
        font-size: 0.90em;
    }

        .table-container:hover {
            box-shadow: 0 0 10px yellow;
        }

        .table-container:hover {
            outline: 0.125rem solid #a09f9f;
        }

    .table-name-input {
        display: none;
        width: 9.375rem;
        padding: 0.3125rem;
        border-bottom: 0.01rem solid #000;
        z-index: 2;
    }

    th {
        color: black;
        text-align: center;
        padding: 0.5rem;
        border-bottom: 0.125rem solid black;
    }

    td {
        text-align: left;
        padding-left: 1rem;
        padding-right: 1rem;
        font-size: 1em;
    }

        td:nth-child(2) {
            width: 7rem;
            text-align: right;
            border-left: 0.125rem solid black;
        }


    .table-settings {
        cursor: pointer; /* Makes the cursor turn into a hand when hovered over the icon, indicating it's clickable */
        padding: 0 5px; /* Adds some padding around the icon */
        color: #666; /* Changes the color of the icon */
        font-size: 18px; /* Changes the size of the icon */
    }

        .table-settings:hover {
            color: #333; /* Darkens the icon when hovered over to indicate it's interactive */
        }

    .button-options {
        display: flex;
        width: fit-content;
        margin: 0 auto;
        display: inline-block;
        margin-left: 70rem;
        padding: .5rem;
    }

    .clear-button, .capture-button-download, .capture-button-save, .deleteLineButton {
        z-index: 1000;
        border: 0.125rem solid #000;
        padding: .3125rem 0.625rem;
        border-radius: 0.3125rem;
        margin-right: 1rem;
    }


    .func-button {
        border: 0.0625rem solid #000;
        padding: 0.3125rem 0.625rem;
        border-radius: 0.3125rem;
    }

    .capture-button:hover, .clear-button:hover, .capture-button-download:hover, .capture-button-save:hover, .deleteLineButton:hover {
        box-shadow: rgba(0, 0, 0, 0.25) 0 0.5rem 0.625rem;
        transform: translateY(-0.0625rem);
    }

</style>



<script>
    let connectionPointsRegistry = {}; // Initialize the registry
    var tableArray = []; // intitalize table array for tables to append to


    // Function Name: addTable
    // Description: This function adds a new table to the interface.
    // It calculates the next table number, creates a unique table container ID,
    // prompts the user for a custom table name or uses a default name, and then populates the table with selected fields.
    // It also handles the addition of SVG icons for table deletion,
    // clears checkbox states, makes the new table draggable, and updates various data structures in the interface.


    function addTable() {
        var tableNumber = $('.table-container').length + 1;
        var tableContainerId = 'table-container-' + tableNumber;
        // Prompt user for custom table name
        var customTableName = 'Table ' + tableNumber;

        var tableName = customTableName ? customTableName : 'Table ' + tableNumber;

        var deleteSvg = '<svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16" id="IconChangeColor" style="float:right; margin-left:10px;"> <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" id="mainIconPathAttribute"></path> </svg>';

        var tableHtml = '<div id="' + tableContainerId + '" class="table-container">';
        tableHtml += '<table>';
        tableHtml += '<tr><th colspan="2" style="text-align:center;">';
        tableHtml += '<span class="table-name">' + tableName + '</span>' + getDeleteSvg('table');
        tableHtml += '<span class="table-settings" onclick="toggleTableNameInput(this)">&#9881;</span>';
        tableHtml += '<input type="text" class="table-name-input" onblur="updateTableName(this)" />';
        tableHtml += '</th></tr>';

        $('input[name="selectedFields"]:checked').each(function () {
            var field = $(this).val();
            var dataType = $(this).parent().text().trim().split('-')[1].trim();

            tableHtml += '<tr>';
            tableHtml += '<td>' + field + ' (' + dataType + ')' + getDeleteSvg('row') + '</td>';

            tableHtml += '<td>';
            tableHtml += '<label class="pk-label"><input type="checkbox" class="primary-key-checkbox" data-table="' + tableNumber + '" onchange="handlePrimaryKeyCheckboxChange(this)" /> PK</label>';
            tableHtml += '<label class="fk-label"><input type="checkbox" class="foreign-key-checkbox" data-table="' + tableNumber + '" onchange="handleForeignKeyCheckboxChange(this)" /> FK</label>';
            tableHtml += '</td>';
            tableHtml += '</tr>';
        });
        tableHtml += '</table>';
        tableHtml += '</div>';

        $('#tables-container').append(tableHtml);

        // Clear the checked state of checkboxes
        $('input[name="selectedFields"]').prop('checked', false);

        // Make the new table draggable
        makeTableDraggable($('#' + tableContainerId));

        // Update the tableArray with the new table
        tableArray.push({
            containerId: tableContainerId,
            tableName: tableName,
        });

        // Update the relationship dropdowns
        updateTableDropdowns();
    }




    // Function Name: getDeleteSvg
    // Description: This function generates an SVG icon for deletion based on the provided type ('table' or 'row').
    // The generated SVG icon includes an onclick event to trigger the deleteElement function when clicked.

    function getDeleteSvg(type) {
        return '<svg onclick="deleteElement(this, \'' + type + '\')" class="delete-icon" xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16" id="IconChangeColor" style="float:right; cursor:pointer;"> <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" id="mainIconPathAttribute"></path> </svg>';
    }


    // Function Name: deleteElement
    // Description: This function handles the deletion of elements based on the provided type ('row' or 'table').
    // If the type is 'row', it removes the closest table row. If the type is 'table', it removes the closest table container.

    function deleteElement(element, type) {
        if (type === 'row') {
            $(element).closest('tr').remove();
        } else if (type === 'table') {
            $(element).closest('.table-container').remove();
        }
    }

    // Function Name: handlePrimaryKeyCheckboxChange
    // Description: This function handles the change event when a primary key checkbox is checked.
    // It ensures that only one primary key can be selected within the same table container by unchecking previously selected primary key checkboxes.
    function handlePrimaryKeyCheckboxChange(checkbox) {
        var isChecked = $(checkbox).is(':checked');
        var tableContainer = $(checkbox).closest('.table-container');

        if (isChecked) {
            // Uncheck previously selected primary key checkboxes
            tableContainer.find('.primary-key-checkbox').not(checkbox).prop('checked', false);
        }
    }

    // Function Name: handleForeignKeyCheckboxChange
    // Description: This function handles the change event when a foreign key checkbox is checked or unchecked.
    // It adds a class 'foreign-key-row' to the corresponding table row if the
    // checkbox is checked, and removes the class if the checkbox is unchecked.

    function handleForeignKeyCheckboxChange(checkbox) {
        var isChecked = $(checkbox).is(':checked');
        var tableContainer = $(checkbox).closest('.table-container');

        if (isChecked) {
            $(checkbox).closest('tr').addClass('foreign-key-row');
        } else {
            $(checkbox).closest('tr').removeClass('foreign-key-row');
        }
    }


    // Function Name: toggleTableNameInput
    // Description: This function toggles between displaying a table name and an editable input field for the table name.
    // It allows the user to edit the table name in-place. When activated, it adds the 'editing' class to the table name element,
    //  displays the input field, and sets focus for editing. When deactivated, it removes the 'editing' class and displays the updated table name.

    function toggleTableNameInput(settingsElement) {
        var tableNameElement = $(settingsElement).siblings('.table-name');
        var inputElement = $(settingsElement).siblings('.table-name-input');

        if (tableNameElement.hasClass('editing')) {
            tableNameElement.removeClass('editing');
            tableNameElement.text(inputElement.val().trim());
        } else {
            tableNameElement.addClass('editing');
            inputElement.val(tableNameElement.text().trim());
            inputElement.show();
            inputElement.focus();
        }
    }


    // Function Name: updateTableName
    // Description: This function updates the table name based on user input in an editable input field.
    // It replaces the old table name with the new one, removes the 'editing' class from the table name element,
    // hides the input field, and updates the table name in the tableArray if found.
    // It also triggers an update of table dropdowns.


    function updateTableName(inputElement) {
        const tableNameElement = $(inputElement).siblings('.table-name');
        const oldTableName = tableNameElement.text();
        const newTableName = inputElement.value.trim();
        tableNameElement.removeClass('editing');
        tableNameElement.text(newTableName);
        $(inputElement).hide();

        // Update the table name in the tableArray
        const tableInfo = tableArray.find(table => table.tableName === oldTableName);
        if (tableInfo) {
            tableInfo.tableName = newTableName;
            updateTableDropdowns();
        }
    }



    // Function Name: makeTableDraggable
    // Description: This function enables the dragging of a table within a diagramming environment.
    // When the user clicks and drags the table, it calculates the new position, constrains it inside the container,
    // and updates the table's position accordingly. Additionally, it updates the lines connected to the table as it's being dragged.

    function makeTableDraggable(table) {
        console.log("Table dragging started");
        table.on('mousedown', function (event) {
            var offsetX = event.clientX - table.position().left;
            var offsetY = event.clientY - table.position().top;

            var container = $('.diagramming-environment');
            var maxLeft = container.width() - table.width();
            var maxTop = container.height() - table.height();

            $(document).on('mousemove', function (event) {
                var leftPos = event.clientX - offsetX;
                var topPos = event.clientY - offsetY;

                // Constrain the table inside the container
                leftPos = Math.max(0, Math.min(maxLeft, leftPos));
                topPos = Math.max(0, Math.min(maxTop, topPos));

                table.css({
                    left: leftPos,
                    top: topPos
                });

                // **NEW** Update the lines connected to this table as it's being dragged
                updateLinesConnectedToTable(table[0]);
            });

            $(document).on('mouseup', function () {
                $(document).off('mousemove');
                $(document).off('mouseup');
            });
        });
    }



    // Function Name: addCustomField
    // Description: This function adds a custom field to the interface. It retrieves the attribute name and type from input elements,
    // validates the attribute name to ensure it's not empty, and creates a new div to represent the attribute.
    // It appends the attribute div to the attributes list and optionally clears the input fields for the next input.
    function addCustomField() {
        const attributeName = document.getElementById("customAttributeName").value;
        const attributeType = document.getElementById("customAttributeType").value;

        if (attributeName.trim() === "") {
            alert("Attribute name cannot be empty!");
            return;
        }

        // Create a new div for this attribute
        const newField = document.createElement("div");
        newField.className = "field";

        // Checkbox with field name
        const checkbox = document.createElement("input");
        checkbox.type = "checkbox";
        checkbox.name = "selectedFields";
        checkbox.value = attributeName;

        // Label to hold checkbox, name and type
        const label = document.createElement("label");
        label.textContent = attributeName + " - " + attributeType;
        label.insertBefore(checkbox, label.firstChild);
        newField.appendChild(label);

        // Append the new field to the attributes list
        const attributesSection = document.querySelector(".attribute-selection");
        attributesSection.insertBefore(newField, document.querySelector(".custom-attribute-input"));

        // Optionally, clear the input fields for the next input
        document.getElementById("customAttributeName").value = "";
    }

    // Make existing tables draggable
    $('.table-container').each(function () {
        makeTableDraggable($(this));
        selectedTables.push($(this));
        updateTableDropdowns();
    });


    // Function Name: updateTableDropdowns
    // Description: This function updates the table selection dropdowns in the interface.
    // It clears the previous options, iterates through the existing table containers,
    // and adds each table name as an option to both the startTable and endTable dropdowns.
    // It also logs messages to indicate the update process, and automatically selects the first and second tables in the dropdowns.

    function updateTableDropdowns() {
        console.log("Updating dropdowns..."); // Log a message when the function is called

        // Empty the dropdowns to remove previous options
        $('#startTable').empty();
        $('#endTable').empty();

        var tableCounter = 0; // Counter to keep track of tables

        $('.table-container').each(function () {
            var tableName = $(this).find('.table-name').text();
            console.log("Found table name:", tableName); // Log each table name found

            // Append each table name as an option to both dropdowns
            $('#startTable, #endTable').append($('<option>', {
                value: tableName,
                text: tableName
            }));

            tableCounter++; // Increment the counter

            // Auto-select the first table in the startTable dropdown and the second table in the endTable dropdown
            if (tableCounter === 1) {
                $('#startTable option:last').prop('selected', true);
            } else if (tableCounter === 2) {
                $('#endTable option:last').prop('selected', true);
            }
        });

        console.log("Dropdowns updated."); // Log a message when the dropdowns are updated
    }







    // Function Name: calculateConnectionPoint
    // Description: This function calculates the connection point on a table element based on the specified side
    // ('top', 'bottom', 'left', 'right'). It computes the position based on the table's offset and dimensions,
    //  and adjusts it if there are existing relationship lines at the same position. The function returns the
    // calculated connection point as an object with x and y coordinates.

    function calculateConnectionPoint(table, side) {
        let point = {
            x: table.offsetLeft + table.offsetWidth / 2,
            y: table.offsetTop + table.offsetHeight / 2
        };

        let offset = 20; // Offset to adjust the position of new relationship lines

        if (side === 'top') {
            point.y = table.offsetTop;
        } else if (side === 'bottom') {
            point.y = table.offsetTop + table.offsetHeight;
        } else if (side === 'left') {
            point.x = table.offsetLeft;
        } else if (side === 'right') {
            point.x = table.offsetLeft + table.offsetWidth;
        }

        // Check if there's already a relationship at this position and adjust if necessary
        let key = `${point.x}-${point.y}-${side}`;
        if (connectionPointsRegistry[key]) {
            if (side === 'bottom' || side === 'top') {
                point.x += offset * connectionPointsRegistry[key];
            } else {
                point.y += offset * connectionPointsRegistry[key];
            }
            connectionPointsRegistry[key]++;
        } else {
            connectionPointsRegistry[key] = 1;
        }

        return point;
    }


    // Function Name: calculateTablePosition
    // Description: This function calculates the center position of a table container element.
    // It retrieves the position, width, and height of the table container and computes the center point,
    // returning it as an object with x and y coordinates.

    function calculateTablePosition(tableContainer) {
        var position = tableContainer.position();
        var width = tableContainer.outerWidth();
        var height = tableContainer.outerHeight();
        return { x: position.left + width / 2, y: position.top + height / 2 };
    }



    /* Function Name: addRelationship
     Description: This function adds a relationship between two tables in the interface.
     It retrieves the selected start and end table names, as well as the relationship type, and then calculates the connection points, draws the lines, and updates the relationship log. */


    function addRelationship() {
        var startTableName = $('#startTable').val();
        var endTableName = $('#endTable').val();
        var relationshipType = $('#relationshipType').val();

        console.log('startTableName:', startTableName); // Debugging output
        console.log('endTableName:', endTableName); // Debugging output
        console.log('relationshipType:', relationshipType); // Debugging output


        // Get the containers of the start and end tables
        var startTableContainer = $('.table-container:has(.table-name:contains("' + startTableName + '"))')[0];
        var endTableContainer = $('.table-container:has(.table-name:contains("' + endTableName + '"))')[0];

        // Determine the sides to connect to
        var startSide = determineConnectionSide(startTableContainer, endTableContainer);
        var endSide = determineConnectionSide(endTableContainer, startTableContainer);

        // Get the connection points based on the sides determined
        var startPos = calculateConnectionPoint(startTableContainer, startSide);
        var endPos = calculateConnectionPoint(endTableContainer, endSide);

        // Draw the small lines with SVG markers
        drawSmallLineWithMarker(startPos, startSide, relationshipType, true);
        drawSmallLineWithMarker(endPos, endSide, relationshipType, false);

        // Draw the connecting line
        drawConnectingLine(startPos, startSide, endPos, endSide);

        //Add the relationship to the log

        var relationshipLog = $(".relationship-log");
        var relationshipLogEntry = document.createElement("div");
        relationshipLogEntry.innerText = "Start Table: " + startTableName + "\nEnd Table: " + endTableName + "\nType: " + relationshipType;
        relationshipLog.append(relationshipLogEntry);
        console.log('After drawing lines...');
    }



    /*
    Function Name: drawConnectingLine
    Description:
        This function draws a connecting line between two tables on the SVG canvas for relationships.
        It takes the starting and ending positions (startPos and endPos) along with their respective sides (startSide and endSide),
        and draws a line connecting them. It adjusts the positions to account for the small lines that
        extend from the tables before drawing the connecting line.
    */
    function drawConnectingLine(startPos, startSide, endPos, endSide) {
        var svg = document.getElementById('relationships');

        var line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
        line.setAttribute('stroke', 'black');

        var offset = 50; // distance of the small lines from the tables

        // Adjusting startPos and endPos to be the endpoints of the small lines
        if (startSide === 'top') {
            startPos.y -= offset;
        } else if (startSide === 'bottom') {
            startPos.y += offset;
        } else if (startSide === 'left') {
            startPos.x -= offset;
        } else if (startSide === 'right') {
            startPos.x += offset;
        }

        if (endSide === 'top') {
            endPos.y -= offset;
        } else if (endSide === 'bottom') {
            endPos.y += offset;
        } else if (endSide === 'left') {
            endPos.x -= offset;
        } else if (endSide === 'right') {
            endPos.x += offset;
        }

        // Setting the coordinates for the connecting line
        line.setAttribute('x1', startPos.x);
        line.setAttribute('y1', startPos.y);
        line.setAttribute('x2', endPos.x);
        line.setAttribute('y2', endPos.y);

        svg.appendChild(line);
    }

    // Function Name: drawSmallLineWithMarker
    // Description:
    // This function draws a small line with an SVG marker at a specified position and side. It is used to represent the start or end of a relationship line between tables in the interface. The function calculates the endpoint of the small
    //  line based on the given position, side, and relationship type. It also determines the appropriate SVG marker based on the relationship type and whether it's a starting or ending line.
    function drawSmallLineWithMarker(pos, side, relationshipType, isStart) {
        var svg = document.getElementById('relationships');

        var line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
        line.setAttribute('stroke', 'black');
        var offset = (relationshipType === 'one') ? 25 : 50; // Adjust offset based on relationship type

        line.setAttribute('x1', pos.x);
        line.setAttribute('y1', pos.y);

        if (side === 'top') {
            line.setAttribute('x2', pos.x);
            line.setAttribute('y2', pos.y - offset);
        } else if (side === 'bottom') {
            line.setAttribute('x2', pos.x);
            line.setAttribute('y2', pos.y + offset);
        } else if (side === 'left') {
            line.setAttribute('x2', pos.x - offset);
            line.setAttribute('y2', pos.y);
        } else if (side === 'right') {
            line.setAttribute('x2', pos.x + offset);
            line.setAttribute('y2', pos.y);
        }

        // Add appropriate SVG marker based on the relationship type and whether it's a starting or ending line
        var marker = isStart ? determineStartMarker(relationshipType) : determineEndMarker(relationshipType);
        line.setAttribute('marker-start', 'url(#' + marker + ')');

        svg.appendChild(line);
    }


    // Function to determine the start marker based on the relationship type
    function determineStartMarker(relationshipType) {
        if (relationshipType === 'one-to-one' || relationshipType === 'one-to-many') {
            return 'cross';
        } else if (relationshipType === 'many-to-one' || relationshipType === 'many-to-many') {
            return 'crowfeet-reverse';
        }
    }

    // Function to determine the end marker based on the relationship type
    function determineEndMarker(relationshipType) {
        if (relationshipType === 'one-to-one' || relationshipType === 'many-to-one') {
            return 'cross';
        } else if (relationshipType === 'one-to-many' || relationshipType === 'many-to-many') {
            return 'crowfeet-reverse';
        }
    }





    // Function Name: determineConnectionSide
    // Description:
    // This function determines the side of a table where a connection should be made with another table. It calculates the centers of the start and
    // end tables and computes the angle of the line between them. Based on the angle, it returns one of the following sides: 'top', 'bottom', 'left', or 'right', indicating where the connection should occur.

    function determineConnectionSide(startTable, endTable) {
        const startCenterX = startTable.offsetLeft + (startTable.offsetWidth / 2);
        const startCenterY = startTable.offsetTop + (startTable.offsetHeight / 2);
        const endCenterX = endTable.offsetLeft + (endTable.offsetWidth / 2);
        const endCenterY = endTable.offsetTop + (endTable.offsetHeight / 2);

        const dx = endCenterX - startCenterX;
        const dy = endCenterY - startCenterY;
        const angle = Math.atan2(dy, dx) * 180 / Math.PI;

        if ((angle >= -45 && angle < 45)) {
            return 'right';
        } else if (angle >= 45 && angle < 135) {
            return 'bottom';
        } else if ((angle >= 135 && angle <= 180) || (angle >= -180 && angle < -135)) {
            return 'left';
        } else {
            return 'top';
        }
    }





    //Button's Functional at bottom of page

    //clear log button clears the log
    function clearRelationshipLog() {
        $('.relationship-log').empty();
    }
    //clear the diagram and all its contnets
    function clearDiagram() {
        // Get all elements with the class "table-container" and remove them
        var tables = document.querySelectorAll(".table-container");
        tables.forEach(function (table) {
            table.remove();
        });

        // Remove lines drawn on the SVG by clearing the inner HTML of the linesLayer
        var linesLayer = document.getElementById("linesLayer");
        if (linesLayer) {
            linesLayer.innerHTML = '';
        }

        // clear the SVG definitions
        var svg = document.getElementById("relationships");
        var defs = svg.getElementsByTagName("defs")[0];
        while (svg.lastChild && svg.lastChild !== defs) {
            svg.removeChild(svg.lastChild);
        }

        // Clear the tableArray to remove references to the old tables
        tableArray = [];

        clearRelationshipLog()

    }

    // clear the lines on the page only as well as the log
    function clearLines() {
        var linesLayer = document.getElementById("linesLayer");
        if (linesLayer) {
            linesLayer.innerHTML = '';
        }

        // clear the SVG definitions
        var svg = document.getElementById("relationships");
        var defs = svg.getElementsByTagName("defs")[0];
        while (svg.lastChild && svg.lastChild !== defs) {
            svg.removeChild(svg.lastChild);
        }


        clearRelationshipLog()
    }

    //capture diagram and download as image
    function captureDiagramDownload() {

        // Prepare the tables by replacing checkboxes with keys or hiding them.
        prepareTableForImage();

        html2canvas(document.querySelector(".diagramming-environment")).then(canvas => {
            var link = document.createElement('a');
            link.href = canvas.toDataURL("image/jpeg").replace("image/jpeg", "image/octet-stream");
            link.download = 'ERDiagram.jpeg';
            link.click();

            // After the image is downloaded, revert the changes made to the tables.
            revertTableAfterImage();
        });
    }


    /*
    Function Name: prepareTableForImage
    Description:
    This function prepares the tables for image export by modifying their appearance and content. It temporarily hides settings icons, delete buttons, and rearranges the order of rows to ensure the primary key row is the first attribute row. It also centers table headings, adjusts cell content, and hides certain labels and checkboxes.

    Note: This function is used for preparing tables before exporting them as images.

    */
    function prepareTableForImage() {
        $('.table-container').each(function () {
            var table = $(this).find('table');

            // Store current table width and height
            var tableWidth = table.width();
            var tableHeight = table.height();

            // Remove settings icon and delete button
            table.find('th .table-settings, th .delete-icon').hide();

            // Remove delete icons from rows
            table.find('tr td .delete-icon').hide();

            // Find the row that has the primary key and the first attribute row
            var pkRow = null;
            var firstAttributeRow = null;
            table.find('tr').each(function (index) {
                if (index == 1) {
                    firstAttributeRow = $(this);
                } else if ($(this).find('.primary-key-checkbox').is(':checked')) {
                    pkRow = $(this);
                }
            });

            // Swap the rows if the primary key row is not already the first attribute row
            if (pkRow && firstAttributeRow && pkRow.index() != firstAttributeRow.index()) {
                firstAttributeRow.insertBefore(pkRow);
                pkRow.insertBefore(firstAttributeRow);
            }

            // Center the table headings
            table.find('th').css({
                'text-align': 'center',
                'vertical-align': 'middle'
            });

            // Restore the original table width and height
            table.css('width', tableWidth);
            table.css('height', tableHeight);
        });

        $('td').each(function () {
            // Save current HTML content and visibility
            $(this).data('original-html', $(this).html());
            $(this).data('original-visibility', $(this).css('visibility'));

            // Center the SVG in the table cell
            $(this).css('text-align', 'center');
            $(this).css('vertical-align', 'middle');

            $('.pk-label, .fk-label').hide();

            if ($(this).find('.primary-key-checkbox').is(':checked')) {
                $(this).html('PK <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-key-fill" viewBox="0 0 16 16" id="IconChangeColor"> <path d="M3.5 11.5a3.5 3.5 0 1 1 3.163-5H14L15.5 8 14 9.5l-1-1-1 1-1-1-1 1-1-1-1 1H6.663a3.5 3.5 0 0 1-3.163 2zM2.5 9a1 1 0 1 0 0-2 1 1 0 0 0 0 2z" id="mainIconPathAttribute" fill="#ffd700" stroke="#000000" stroke-width=".5"></path> </svg>');
            } else if ($(this).find('.foreign-key-checkbox').is(':checked')) {
                $(this).html('FK <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-key-fill" viewBox="0 0 16 16" id="IconChangeColor"> <path d="M3.5 11.5a3.5 3.5 0 1 1 3.163-5H14L15.5 8 14 9.5l-1-1-1 1-1-1-1 1-1-1-1 1H6.663a3.5 3.5 0 0 1-3.163 2zM2.5 9a1 1 0 1 0 0-2 1 1 0 0 0 0 2z" id="mainIconPathAttribute" fill="#03989e" stroke="#000000" stroke-width=".5"></path> </svg>');
            } else {
                $(this).find('.primary-key-checkbox, .foreign-key-checkbox').hide();
            }
            $('.pk-label, .fk-label').hide();
        });
    }

    /*
    Function Name: revertTableAfterImage
    Description:
    This function reverts the tables to their original state after image export. It restores the visibility of settings icons, delete buttons, cell content, primary key and foreign key checkboxes, and labels.

    Note: This function is used after exporting tables as images to restore their original appearance and functionality.

    */
    function revertTableAfterImage() {
        $('.table-container').each(function () {
            var table = $(this).find('table');

            // Show settings icon and delete button in headers
            table.find('th .table-settings, th .delete-icon').show();
        });

        $('td').each(function () {
            // Revert to original HTML content and visibility
            $(this).html($(this).data('original-html'));
            $(this).css('visibility', $(this).data('original-visibility'));

            // Show the primary key and foreign key checkboxes
            $(this).find('.primary-key-checkbox, .foreign-key-checkbox').show();

            // Show the delete buttons in table rows
            $(this).find('.delete-icon').show();

            // Show the primary key and foreign key labels
            $('.pk-label, .fk-label').show();
        });
    }
</script>

